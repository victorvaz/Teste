package view;

import Core.Excecao.Excecao;
import Entity.Estado;
import Entity.Processo;
import Entity.Recorte;
import Entity.Tribunal;
import Model.EstadoModel;
import Model.ProcessoModel;
import Model.RecorteModel;
import Model.TribunalModel;
import java.awt.HeadlessException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lib.GuiUtils;

/**
 * Tela principal do sistema
 * @author Víctor Vaz de Oliveira <victor.vaz@vistaes.com.br>
 */
public class TelaPrincipal extends javax.swing.JFrame
{
    // Classes de modelo:
    private final RecorteModel  cRecorteModel;
    private final EstadoModel   cEstadoModel;
    private final TribunalModel cTribunalModel;
    private final ProcessoModel cProcessoModel;
    
    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() 
    {
        // Inicia as classes de modelo:
        this.cRecorteModel  = new RecorteModel();
        this.cEstadoModel   = new EstadoModel();
        this.cTribunalModel = new TribunalModel();
        this.cProcessoModel = new ProcessoModel();
        
        // Inicializa os componentes:
        initComponents();
        dataBusca.setText(new SimpleDateFormat("dd/MM/yyyy").format(new Date()));
        
        // Carrega os recortes:
        carregarRecortes();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        selectEstado = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        dataBusca = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        selectTribunal = new javax.swing.JComboBox();
        btnBuscar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSplitPane = new javax.swing.JSplitPane();
        jPanelTabela = new javax.swing.JPanel();
        jInternalFrameProcessos = new javax.swing.JInternalFrame();
        jScrollPaneTabela = new javax.swing.JScrollPane();
        tabelaProcessos = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFiltro = new javax.swing.JMenu();
        btnFiltrarPorTrechoDaPublicacao = new javax.swing.JMenuItem();
        jPanelDetalhesPublicacao = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelCabecalho = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        numPublicacaoTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        numeroProcessoPublicacaoTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        dataPublicacaoTxt = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ordemPublicacaoTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        arquivoPublicacaoTxt = new javax.swing.JTextField();
        escritorioPublicacaoTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nomeBuscadotxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tribunalPublicacaoTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        varaPublicacaoTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btnProxima = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        labelPaginacao = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        comarcaPublicacaoTxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textoPublicacaoTxt = new javax.swing.JEditorPane();
        jLabel14 = new javax.swing.JLabel();
        selectRecorte = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Revisor de Publicações");

        jLabel2.setText("Estado:");

        selectEstado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectEstadoItemStateChanged(evt);
            }
        });
        selectEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectEstadoActionPerformed(evt);
            }
        });

        jLabel3.setText("Data:");

        dataBusca.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM))));
        dataBusca.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);

        jLabel4.setText("Tribunal:");

        selectTribunal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectTribunalItemStateChanged(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jSplitPane.setDividerLocation(250);

        jInternalFrameProcessos.setTitle("Processos");
        jInternalFrameProcessos.setVisible(true);

        tabelaProcessos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Data", "Tribunal", "Escritório", "Nome Buscado", "Verificado?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProcessos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaProcessos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaProcessosMouseClicked(evt);
            }
        });
        tabelaProcessos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tabelaProcessosKeyTyped(evt);
            }
        });
        jScrollPaneTabela.setViewportView(tabelaProcessos);

        menuFiltro.setText("Filtrar");
        menuFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFiltroActionPerformed(evt);
            }
        });

        btnFiltrarPorTrechoDaPublicacao.setText("Filtrar por trecho da publicação");
        btnFiltrarPorTrechoDaPublicacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarPorTrechoDaPublicacaoActionPerformed(evt);
            }
        });
        menuFiltro.add(btnFiltrarPorTrechoDaPublicacao);

        jMenuBar1.add(menuFiltro);

        jInternalFrameProcessos.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout jInternalFrameProcessosLayout = new javax.swing.GroupLayout(jInternalFrameProcessos.getContentPane());
        jInternalFrameProcessos.getContentPane().setLayout(jInternalFrameProcessosLayout);
        jInternalFrameProcessosLayout.setHorizontalGroup(
            jInternalFrameProcessosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTabela, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
        );
        jInternalFrameProcessosLayout.setVerticalGroup(
            jInternalFrameProcessosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelTabelaLayout = new javax.swing.GroupLayout(jPanelTabela);
        jPanelTabela.setLayout(jPanelTabelaLayout);
        jPanelTabelaLayout.setHorizontalGroup(
            jPanelTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrameProcessos, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanelTabelaLayout.setVerticalGroup(
            jPanelTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrameProcessos)
        );

        jSplitPane.setLeftComponent(jPanelTabela);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jLabel1.setText("NUM:");

        numPublicacaoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numPublicacaoTxtActionPerformed(evt);
            }
        });

        jLabel7.setText("NÚMERO DE PROCESSO:");

        jLabel5.setText("DATA:");

        jLabel10.setText("ORDEM:");

        jLabel11.setText("ARQUIVO:");

        jLabel6.setText("ESCRITÓRIO:");

        jLabel8.setText("NOME BUSCADO:");

        jLabel12.setText("TRIBUNAL:");

        jLabel13.setText("VARA:");

        btnProxima.setText("Próxima");
        btnProxima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProximaActionPerformed(evt);
            }
        });

        btnAnterior.setText("Anterior");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        labelPaginacao.setText("0 / 0");

        jLabel15.setText("COMARCA:");

        javax.swing.GroupLayout jPanelCabecalhoLayout = new javax.swing.GroupLayout(jPanelCabecalho);
        jPanelCabecalho.setLayout(jPanelCabecalhoLayout);
        jPanelCabecalhoLayout.setHorizontalGroup(
            jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCabecalhoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(arquivoPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ordemPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dataPublicacaoTxt))
                            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                                        .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel12))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(escritorioPublicacaoTxt)
                                            .addComponent(tribunalPublicacaoTxt))
                                        .addGap(12, 12, 12)
                                        .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel13))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(numeroProcessoPublicacaoTxt)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel15)
                                        .addGap(6, 6, 6)))
                                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comarcaPublicacaoTxt)
                                    .addComponent(varaPublicacaoTxt)
                                    .addComponent(nomeBuscadotxt)))))
                    .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCabecalhoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAnterior)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelPaginacao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnProxima)))
                .addContainerGap())
        );
        jPanelCabecalhoLayout.setVerticalGroup(
            jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(dataPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(ordemPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(arquivoPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(escritorioPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(nomeBuscadotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tribunalPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(varaPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numeroProcessoPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel15)
                    .addComponent(comarcaPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProxima)
                    .addComponent(btnAnterior)
                    .addComponent(labelPaginacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9))
        );

        jSplitPane1.setTopComponent(jPanelCabecalho);

        textoPublicacaoTxt.setContentType("text/html"); // NOI18N
        textoPublicacaoTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(textoPublicacaoTxt);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout jPanelDetalhesPublicacaoLayout = new javax.swing.GroupLayout(jPanelDetalhesPublicacao);
        jPanelDetalhesPublicacao.setLayout(jPanelDetalhesPublicacaoLayout);
        jPanelDetalhesPublicacaoLayout.setHorizontalGroup(
            jPanelDetalhesPublicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        jPanelDetalhesPublicacaoLayout.setVerticalGroup(
            jPanelDetalhesPublicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
        );

        jSplitPane.setRightComponent(jPanelDetalhesPublicacao);

        jLabel14.setText("Recorte:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1124, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectRecorte, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectTribunal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(dataBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(selectTribunal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar)
                    .addComponent(jLabel14)
                    .addComponent(selectRecorte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
	
    private void selectEstadoActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_selectEstadoActionPerformed
        carregarTribunais();
    }//GEN-LAST:event_selectEstadoActionPerformed

    /**
     * Função chamada ao clicar no botão buscar
     * @param evt 
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        carregarTabela();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void numPublicacaoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numPublicacaoTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numPublicacaoTxtActionPerformed

    /**
     * Função chamada ao clicar no botão anterior
     * @param evt 
     */
    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        if (tabelaProcessos.getSelectedRow() == 0)
        {
            GuiUtils.selectAndScroll(tabelaProcessos, (tabelaProcessos.getRowCount() - 1));
        }
        else
        {
            GuiUtils.selectAndScroll(tabelaProcessos, (tabelaProcessos.getSelectedRow() - 1));
        }
        carregarPublicacao();
    }//GEN-LAST:event_btnAnteriorActionPerformed

    /**
     * Função chamada ao clicar no botão próximo
     * @param evt 
     */
    private void btnProximaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProximaActionPerformed
        if ((tabelaProcessos.getSelectedRow()) == (tabelaProcessos.getRowCount() - 1))
        {
            GuiUtils.selectAndScroll(tabelaProcessos, 0);
        }
        else
        {
            GuiUtils.selectAndScroll(tabelaProcessos, tabelaProcessos.getSelectedRow() + 1);
        }
        carregarPublicacao();
    }//GEN-LAST:event_btnProximaActionPerformed

    /**
     * Função chamada ao teclar na tabela de processos
     * @param evt 
     */
    private void tabelaProcessosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaProcessosKeyTyped
        carregarPublicacao();
    }//GEN-LAST:event_tabelaProcessosKeyTyped

    /**
     * Função chamada ao clicar na linha da tabela de processos
     * @param evt 
     */
    private void tabelaProcessosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProcessosMouseClicked
        carregarPublicacao();
    }//GEN-LAST:event_tabelaProcessosMouseClicked

    private void menuFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFiltroActionPerformed
    }//GEN-LAST:event_menuFiltroActionPerformed

    /**
     * Função chamada ao clicar no botão filtrar por trecho da publicação.
     * @param evt 
     */
    private void btnFiltrarPorTrechoDaPublicacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarPorTrechoDaPublicacaoActionPerformed
        new FiltroPublicacoes(this).setVisible(true);
    }//GEN-LAST:event_btnFiltrarPorTrechoDaPublicacaoActionPerformed

    private void selectEstadoItemStateChanged(java.awt.event.ItemEvent evt){}
    
    private void selectTribunalItemStateChanged(java.awt.event.ItemEvent evt){}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new TelaPrincipal().setVisible(true);
            }
        });
    }
    
    /**
     * Função para buscar todos os recortes e coloca no select dos recortes da tela inicial
     */
    private void carregarRecortes()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            @SuppressWarnings("unchecked")
            public void run()
            {
                // Busca os recortes
                List<Recorte> ListaRecortes = cRecorteModel.buscar();
                
                for (Recorte ListaRecorte : ListaRecortes)
                {
                    String nomeRecorte = ListaRecorte.getNomeRecorte();                    
                    selectRecorte.addItem(nomeRecorte);
                }
                
                // Deixa selecionado o index 0
                if (!ListaRecortes.isEmpty())
                {
                    selectRecorte.setSelectedIndex(0);
                }
                
                // Carrega os estados
                carregarEstados();
            }            
        }, "Thread para buscar os recortes.");
        
        thread.start();
    }
    
    /**
     * Função para buscar todos os estados e colocar no select dos estados da tela inicial.
     */
    private void carregarEstados()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            @SuppressWarnings("unchecked")
            public void run()
            {
                // Busca os estados
                List<Estado> ListaEstados = cEstadoModel.buscar();
                
                for (Estado ListaEstado : ListaEstados)
                {
                    String nomeEstado = ListaEstado.getNome();
                    selectEstado.addItem(nomeEstado);
                }
                
                // Deixa selecionado como padrão o index 0
                if (!ListaEstados.isEmpty())
                {
                    selectEstado.setSelectedIndex(0);
                }
                
                // Carrega os tribunais
                carregarTribunais();
            }
        }, "Thread para buscar os estados.");
        
        thread.start();
    }
    
    /**
     * Função para buscar todos os tribunais de acordo com o estado selecionado
     */
    private void carregarTribunais()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            @SuppressWarnings("unchecked")
            public void run()
            {
                Recorte cRecorte = new Recorte();
                cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());
                
                Estado cEstado = new Estado();
                cEstado.setNome(selectEstado.getSelectedItem().toString());
                
                selectTribunal.removeAllItems();
                
                // Busca os tribunais
                List<Tribunal> ListaTribunais = cTribunalModel.buscarPorEstado(cRecorte, cEstado);
                
                selectTribunal.addItem("Todos");
                
                for (Tribunal ListaTribunal : ListaTribunais)
                {
                    String siglaTribunal = ListaTribunal.getSigla();
                    String nomeTribunal  = ListaTribunal.getNomeTribunal();                    
                    selectTribunal.addItem(siglaTribunal + " - " + nomeTribunal);
                }
                
                // Deixa selecionado como padrão o index 0
                if (!ListaTribunais.isEmpty())
                {
                    selectTribunal.setSelectedIndex(0);
                }
            }
        }, "Thread para buscar os tribunais.");
        
        thread.start();
    }
    
    /**
     * Função para alimentar a tabela
     */
    private void carregarTabela()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                btnBuscar.setEnabled(false);
                btnBuscar.setText("Buscando...");
                
                try
                {
                    Recorte cRecorte = new Recorte();
                    cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                    Estado cEstado = new Estado();
                    cEstado.setNome(selectEstado.getSelectedItem().toString());

                    DateFormat df = DateFormat.getDateInstance();
                    Date data = df.parse(dataBusca.getText());

                    List<Processo> ListaProcessos = null;

                    if (selectTribunal.getSelectedItem().toString().equalsIgnoreCase("Todos"))
                    {
                        ListaProcessos = cProcessoModel.buscar(cRecorte, cEstado, data);
                    }
                    else
                    {
                        Tribunal cTribunal = new Tribunal();
                        cTribunal.setNomeTribunal(selectTribunal.getSelectedItem().toString().split(" - ")[1]);

                        ListaProcessos = cProcessoModel.buscar(cRecorte, cEstado, data, cTribunal);
                    }

                    DefaultTableModel model = (DefaultTableModel) tabelaProcessos.getModel();
                    model.setNumRows(0);

                    if (ListaProcessos.isEmpty())
                    {
                        JOptionPane.showMessageDialog(null, "Não existem publicações de acordo com a busca.");
                    }
                    else
                    {
                        for (Processo cProcesso : ListaProcessos)
                        {
                            Object[] linha =
                            {
                                cProcesso.getNumProcesso(),
                                new SimpleDateFormat("dd/MM/yyyy").format(cProcesso.getDataPublicacao()),
                                cProcesso.getTribunal().getSigla(),
                                cProcesso.getEscritorio().getNome(),
                                cProcesso.getEscritorio().getCliente().getNome(),
                                ""
                            };

                            model.addRow(linha);
                        }
                    }
                }
                catch (HeadlessException | ParseException ex)
                {
                    new Excecao("Erro ao buscar os processos", this.getClass().getName(), ex.toString());
                }
                
                btnBuscar.setEnabled(true);
                btnBuscar.setText("Buscar");
                
                atualizaLabelPaginacao(0);
            }
        }, "Thread para buscar os valores para a tabela");
        
        thread.start();
    }
    
    /**
     * Função para filtrar a tabela
     * @param trechoBusca
     */
    public void filtrarTabelaPorTrecho(final String trechoBusca)
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                menuFiltro.setText("Buscando...");
                
                try
                {                    
                    Recorte cRecorte = new Recorte();
                    cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                    Estado cEstado = new Estado();
                    cEstado.setNome(selectEstado.getSelectedItem().toString());

                    DateFormat df = DateFormat.getDateInstance();
                    Date data = df.parse(dataBusca.getText());

                    List<Processo> ListaProcessos = null;

                    if (selectTribunal.getSelectedItem().toString().equalsIgnoreCase("Todos"))
                    {
                        ListaProcessos = cProcessoModel.buscar(cRecorte, cEstado, data, trechoBusca);
                    }
                    else
                    {
                        Tribunal cTribunal = new Tribunal();
                        cTribunal.setNomeTribunal(selectTribunal.getSelectedItem().toString().split(" - ")[1]);

                        ListaProcessos = cProcessoModel.buscar(cRecorte, cEstado, data, cTribunal, trechoBusca);
                    }

                    DefaultTableModel model = (DefaultTableModel) tabelaProcessos.getModel();
                    model.setNumRows(0);

                    if (ListaProcessos.isEmpty())
                    {
                        JOptionPane.showMessageDialog(null, "Não existem publicações de acordo com a busca.");
                    }
                    else
                    {
                        for (Processo cProcesso : ListaProcessos)
                        {
                            Object[] linha =
                            {
                                cProcesso.getNumProcesso(),
                                new SimpleDateFormat("dd/MM/yyyy").format(cProcesso.getDataPublicacao()),
                                cProcesso.getTribunal().getSigla(),
                                cProcesso.getEscritorio().getNome(),
                                cProcesso.getEscritorio().getCliente().getNome(),
                                ""
                            };

                            model.addRow(linha);
                        }
                    }
                }
                catch (HeadlessException | ParseException ex)
                {
                    new Excecao("Erro ao buscar os processos", this.getClass().getName(), ex.toString());
                }
                
                atualizaLabelPaginacao(0);
                
                menuFiltro.setText("Filtrar");
            }
        });
        thread.start();
    }
    
    /**
     * Função para carregar a publicação
     */
    private void carregarPublicacao()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    Recorte cRecorte = new Recorte();
                    cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                    Estado cEstado = new Estado();
                    cEstado.setNome(selectEstado.getSelectedItem().toString());

                    Processo cProcesso = cProcessoModel.buscar(cRecorte, cEstado, (int) tabelaProcessos.getValueAt(tabelaProcessos.getSelectedRow(), 0));
                    
                    numPublicacaoTxt.setText(cProcesso.getNumProcesso() + "");
                    numeroProcessoPublicacaoTxt.setText(cProcesso.getNumeroProcesso());
                    arquivoPublicacaoTxt.setText(cProcesso.getArquivo());
                    ordemPublicacaoTxt.setText(cProcesso.getOrdem() + "");
                    dataPublicacaoTxt.setText(new SimpleDateFormat("dd/MM/yyyy").format(cProcesso.getDataPublicacao()));
                    escritorioPublicacaoTxt.setText(cProcesso.getEscritorio().getNome());
                    nomeBuscadotxt.setText(cProcesso.getEscritorio().getCliente().getNome());
                    tribunalPublicacaoTxt.setText(cProcesso.getTribunal().getNomeTribunal());
                    varaPublicacaoTxt.setText(cProcesso.getVara());
                    
                    // Preenche o corpo da publicação:                    
                    String nomeBuscado        = cProcesso.getEscritorio().getCliente().getNome();
                    String nomeBuscadoMarcado = "<font bgcolor='black' color='white'>" + nomeBuscado + "</font>";
                    
                    String textoPublicacao    = cProcesso.getCorpoPublicacao();
                    textoPublicacao = cProcesso.getCorpoPublicacao().replaceAll("(?i)" + nomeBuscado, nomeBuscadoMarcado);
                    
                    textoPublicacaoTxt.setText(textoPublicacao);
                    
                    atualizaLabelPaginacao(tabelaProcessos.getSelectedRow());
                }
                catch (HeadlessException ex)
                {
                    new Excecao("Erro ao buscar os processos", this.getClass().getName(), ex.toString());
                }
            }
        });
        
        thread.start();
    }
    
    /**
     * Função para atualizar a Label de paginação
     * @param indexAtual Índice atual da paginação.
     */
    private void atualizaLabelPaginacao(int indexAtual)
    {
        labelPaginacao.setText((indexAtual + 1) + " / " + tabelaProcessos.getModel().getRowCount());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField arquivoPublicacaoTxt;
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JMenuItem btnFiltrarPorTrechoDaPublicacao;
    private javax.swing.JButton btnProxima;
    private javax.swing.JTextField comarcaPublicacaoTxt;
    private javax.swing.JFormattedTextField dataBusca;
    private javax.swing.JFormattedTextField dataPublicacaoTxt;
    private javax.swing.JTextField escritorioPublicacaoTxt;
    private javax.swing.JInternalFrame jInternalFrameProcessos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanelCabecalho;
    private javax.swing.JPanel jPanelDetalhesPublicacao;
    private javax.swing.JPanel jPanelTabela;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneTabela;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel labelPaginacao;
    private javax.swing.JMenu menuFiltro;
    private javax.swing.JTextField nomeBuscadotxt;
    private javax.swing.JTextField numPublicacaoTxt;
    private javax.swing.JTextField numeroProcessoPublicacaoTxt;
    private javax.swing.JTextField ordemPublicacaoTxt;
    private javax.swing.JComboBox selectEstado;
    private javax.swing.JComboBox selectRecorte;
    private javax.swing.JComboBox selectTribunal;
    private javax.swing.JTable tabelaProcessos;
    private javax.swing.JEditorPane textoPublicacaoTxt;
    private javax.swing.JTextField tribunalPublicacaoTxt;
    private javax.swing.JTextField varaPublicacaoTxt;
    // End of variables declaration//GEN-END:variables
}
