package view;

import Core.Excecao.Excecao;
import Entity.Cliente;
import Entity.Escritorio;
import Entity.Estado;
import Entity.Processo;
import Entity.Recorte;
import Entity.Tribunal;
import Model.EstadoModel;
import Model.ProcessoModel;
import Model.RecorteModel;
import Model.TribunalModel;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lib.GuiUtils;
import org.jsoup.Jsoup;

/**
 * Tela principal do sistema
 * @author Víctor Vaz de Oliveira <victor.vaz@vistaes.com.br>
 */
public class TelaPrincipal extends javax.swing.JFrame
{
    // Classes de modelo:
    private final RecorteModel  cRecorteModel;
    private final EstadoModel   cEstadoModel;
    private final TribunalModel cTribunalModel;
    
    // Variáveis da tela de publicação:
    private String  varaPublicacao;
    private String  corpoPublicacao;
    private boolean conteudoAlterado;
    private Date    dataVistaProcesso;
    
    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() 
    {
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/view/resources/logo512.png"));
        this.setIconImage(imagemTitulo);
        
        // Inicia as classes de modelo:
        this.cRecorteModel  = new RecorteModel();
        this.cEstadoModel   = new EstadoModel();
        this.cTribunalModel = new TribunalModel();
        
        conteudoAlterado = false;
        
        // Inicializa os componentes:
        initComponents();
        dataBusca.setText(new SimpleDateFormat("dd/MM/yyyy").format(new Date()));
        btnNovoProcessoCabecalhoModelo.setEnabled(false);
        btnDuplicarPublicacao.setEnabled(false);
        btnSalvar.setEnabled(false);
        menuMarcar.setEnabled(false);
        barraProgressoOperacaoDemorada.setVisible(false);
        
        // Carrega os recortes:
        carregarRecortes();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        selectEstado = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        dataBusca = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        selectTribunal = new javax.swing.JComboBox();
        btnBuscar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSplitPane = new javax.swing.JSplitPane();
        jPanelTabela = new javax.swing.JPanel();
        jInternalFrameListaPublicacoes = new javax.swing.JInternalFrame();
        jScrollPaneTabela = new javax.swing.JScrollPane();
        tabelaProcessos = new javax.swing.JTable();
        jPanelDetalhesPublicacao = new javax.swing.JPanel();
        jInternalFrameDetalhesProcesso = new javax.swing.JInternalFrame();
        jPanelCabecalho = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        numeroProcessoPublicacaoTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        dataPublicacaoTxt = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ordemPublicacaoTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        arquivoPublicacaoTxt = new javax.swing.JTextField();
        escritorioPublicacaoTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nomeBuscadotxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tribunalPublicacaoTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        varaPublicacaoTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btnProxima = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        labelPaginacao = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        comarcaPublicacaoTxt = new javax.swing.JTextField();
        codEscritorioTxt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        dataDisponibilizacaoTxt = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textoPublicacaoTxt = new javax.swing.JEditorPane();
        jLabel14 = new javax.swing.JLabel();
        selectRecorte = new javax.swing.JComboBox();
        jToolBar1 = new javax.swing.JToolBar();
        btnNovaPublicacaoEmBranco = new javax.swing.JButton();
        btnDuplicarPublicacao = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        barraProgressoOperacaoDemorada = new javax.swing.JProgressBar();
        jMenuBar2 = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        btnNovoProcessoEmBranco = new javax.swing.JMenuItem();
        btnNovoProcessoCabecalhoModelo = new javax.swing.JMenuItem();
        btnSalvarPublicacao = new javax.swing.JMenuItem();
        menuFiltro = new javax.swing.JMenu();
        btnFiltrarPorNumeroUnico = new javax.swing.JMenuItem();
        btnFiltrarPorTrechoDaPublicacao = new javax.swing.JMenuItem();
        btnFiltrarPorCodigoEscritorio = new javax.swing.JMenuItem();
        separator = new javax.swing.JPopupMenu.Separator();
        btnLimparFiltro = new javax.swing.JMenuItem();
        menuMarcar = new javax.swing.JMenu();
        btnMarcarProcessosRevisado = new javax.swing.JMenuItem();
        btnDesmarcarProcessosRevisado = new javax.swing.JMenuItem();
        menuAjuda = new javax.swing.JMenu();
        menuSobre = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Revisor de Publicações 1.0.0.8");

        jLabel2.setText("Estado:");

        selectEstado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectEstadoItemStateChanged(evt);
            }
        });
        selectEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectEstadoActionPerformed(evt);
            }
        });

        jLabel3.setText("Data:");

        dataBusca.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM))));
        dataBusca.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);

        jLabel4.setText("Diário:");

        selectTribunal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectTribunalItemStateChanged(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jSplitPane.setDividerLocation(250);

        jInternalFrameListaPublicacoes.setTitle("Processos");
        jInternalFrameListaPublicacoes.setToolTipText("");
        jInternalFrameListaPublicacoes.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/lista.png"))); // NOI18N
        jInternalFrameListaPublicacoes.setVisible(true);

        tabelaProcessos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Diário", "Escritório", "Variação", "Verificado?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProcessos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaProcessos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaProcessosMouseClicked(evt);
            }
        });
        tabelaProcessos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabelaProcessosKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tabelaProcessosKeyTyped(evt);
            }
        });
        jScrollPaneTabela.setViewportView(tabelaProcessos);

        javax.swing.GroupLayout jInternalFrameListaPublicacoesLayout = new javax.swing.GroupLayout(jInternalFrameListaPublicacoes.getContentPane());
        jInternalFrameListaPublicacoes.getContentPane().setLayout(jInternalFrameListaPublicacoesLayout);
        jInternalFrameListaPublicacoesLayout.setHorizontalGroup(
            jInternalFrameListaPublicacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 233, Short.MAX_VALUE)
            .addGroup(jInternalFrameListaPublicacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPaneTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
        );
        jInternalFrameListaPublicacoesLayout.setVerticalGroup(
            jInternalFrameListaPublicacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
            .addGroup(jInternalFrameListaPublicacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPaneTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelTabelaLayout = new javax.swing.GroupLayout(jPanelTabela);
        jPanelTabela.setLayout(jPanelTabelaLayout);
        jPanelTabelaLayout.setHorizontalGroup(
            jPanelTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrameListaPublicacoes, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanelTabelaLayout.setVerticalGroup(
            jPanelTabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrameListaPublicacoes)
        );

        jSplitPane.setLeftComponent(jPanelTabela);

        jInternalFrameDetalhesProcesso.setTitle("Detalhes do processo");
        jInternalFrameDetalhesProcesso.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/publicacao.png"))); // NOI18N
        jInternalFrameDetalhesProcesso.setVisible(true);

        jLabel7.setText("Nº PROCESSO:");

        numeroProcessoPublicacaoTxt.setEditable(false);
        numeroProcessoPublicacaoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numeroProcessoPublicacaoTxtActionPerformed(evt);
            }
        });

        jLabel5.setText("DATA PUBLICAÇÃO:");

        dataPublicacaoTxt.setEditable(false);

        jLabel10.setText("ORDEM:");

        ordemPublicacaoTxt.setEditable(false);

        jLabel11.setText("ARQUIVO:");

        arquivoPublicacaoTxt.setEditable(false);
        arquivoPublicacaoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arquivoPublicacaoTxtActionPerformed(evt);
            }
        });

        escritorioPublicacaoTxt.setEditable(false);

        jLabel6.setText("ESCRITÓRIO:");

        nomeBuscadotxt.setEditable(false);

        jLabel8.setText("VARIAÇÃO:");

        tribunalPublicacaoTxt.setEditable(false);

        jLabel12.setText("DIÁRIO:");

        varaPublicacaoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                varaPublicacaoTxtKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                varaPublicacaoTxtKeyReleased(evt);
            }
        });

        jLabel13.setText("VARA:");

        btnProxima.setText("Próxima");
        btnProxima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProximaActionPerformed(evt);
            }
        });

        btnAnterior.setText("Anterior");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        labelPaginacao.setText("0 / 0");

        jLabel15.setText("COMARCA:");

        comarcaPublicacaoTxt.setEditable(false);

        codEscritorioTxt.setEditable(false);

        jLabel16.setText("DATA DISPONIBILIZAÇÃO:");

        dataDisponibilizacaoTxt.setEditable(false);

        javax.swing.GroupLayout jPanelCabecalhoLayout = new javax.swing.GroupLayout(jPanelCabecalho);
        jPanelCabecalho.setLayout(jPanelCabecalhoLayout);
        jPanelCabecalhoLayout.setHorizontalGroup(
            jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCabecalhoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel12)
                            .addComponent(jLabel7)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                                .addComponent(arquivoPublicacaoTxt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ordemPublicacaoTxt))
                            .addComponent(numeroProcessoPublicacaoTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                                .addComponent(codEscritorioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(escritorioPublicacaoTxt))
                            .addComponent(tribunalPublicacaoTxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel8)
                            .addComponent(jLabel13)
                            .addComponent(jLabel5))
                        .addGap(6, 6, 6)
                        .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comarcaPublicacaoTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                            .addComponent(varaPublicacaoTxt)
                            .addComponent(nomeBuscadotxt)
                            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                                .addComponent(dataPublicacaoTxt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dataDisponibilizacaoTxt))))
                    .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCabecalhoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAnterior)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelPaginacao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnProxima)))
                .addContainerGap())
        );
        jPanelCabecalhoLayout.setVerticalGroup(
            jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dataPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(ordemPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(arquivoPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(dataDisponibilizacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(escritorioPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(nomeBuscadotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codEscritorioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tribunalPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(varaPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numeroProcessoPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel15)
                    .addComponent(comarcaPublicacaoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProxima)
                    .addComponent(btnAnterior)
                    .addComponent(labelPaginacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9))
        );

        textoPublicacaoTxt.setContentType("text/html"); // NOI18N
        textoPublicacaoTxt.setText("<html>\r\n  <head>\r\n\r\n  </head>\r\n  <body>\r\n    <p style=\"margin-top: 0;\">\r\n      \r\n    </p>\r\n  </body>\r\n</html>\r\n");
        textoPublicacaoTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textoPublicacaoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textoPublicacaoTxtKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(textoPublicacaoTxt);

        javax.swing.GroupLayout jInternalFrameDetalhesProcessoLayout = new javax.swing.GroupLayout(jInternalFrameDetalhesProcesso.getContentPane());
        jInternalFrameDetalhesProcesso.getContentPane().setLayout(jInternalFrameDetalhesProcessoLayout);
        jInternalFrameDetalhesProcessoLayout.setHorizontalGroup(
            jInternalFrameDetalhesProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelCabecalho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jInternalFrameDetalhesProcessoLayout.setVerticalGroup(
            jInternalFrameDetalhesProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrameDetalhesProcessoLayout.createSequentialGroup()
                .addComponent(jPanelCabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelDetalhesPublicacaoLayout = new javax.swing.GroupLayout(jPanelDetalhesPublicacao);
        jPanelDetalhesPublicacao.setLayout(jPanelDetalhesPublicacaoLayout);
        jPanelDetalhesPublicacaoLayout.setHorizontalGroup(
            jPanelDetalhesPublicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 855, Short.MAX_VALUE)
            .addGroup(jPanelDetalhesPublicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelDetalhesPublicacaoLayout.createSequentialGroup()
                    .addComponent(jInternalFrameDetalhesProcesso)
                    .addGap(0, 0, 0)))
        );
        jPanelDetalhesPublicacaoLayout.setVerticalGroup(
            jPanelDetalhesPublicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 377, Short.MAX_VALUE)
            .addGroup(jPanelDetalhesPublicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelDetalhesPublicacaoLayout.createSequentialGroup()
                    .addComponent(jInternalFrameDetalhesProcesso)
                    .addGap(0, 0, 0)))
        );

        jSplitPane.setRightComponent(jPanelDetalhesPublicacao);

        jLabel14.setText("Recorte:");

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setFloatable(false);

        btnNovaPublicacaoEmBranco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/novo.png"))); // NOI18N
        btnNovaPublicacaoEmBranco.setFocusable(false);
        btnNovaPublicacaoEmBranco.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNovaPublicacaoEmBranco.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNovaPublicacaoEmBranco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaPublicacaoEmBrancoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNovaPublicacaoEmBranco);

        btnDuplicarPublicacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/duplicar.png"))); // NOI18N
        btnDuplicarPublicacao.setFocusable(false);
        btnDuplicarPublicacao.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDuplicarPublicacao.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDuplicarPublicacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDuplicarPublicacaoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDuplicarPublicacao);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/save.png"))); // NOI18N
        btnSalvar.setEnabled(false);
        btnSalvar.setFocusable(false);
        btnSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSalvar);

        jToolBar2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar2.setFloatable(false);

        barraProgressoOperacaoDemorada.setStringPainted(true);
        jToolBar2.add(barraProgressoOperacaoDemorada);

        menuArquivo.setText("Arquivo");
        menuArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArquivoActionPerformed(evt);
            }
        });

        btnNovoProcessoEmBranco.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        btnNovoProcessoEmBranco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/novo.png"))); // NOI18N
        btnNovoProcessoEmBranco.setText("Novo Processo em Branco");
        btnNovoProcessoEmBranco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoProcessoEmBrancoActionPerformed(evt);
            }
        });
        menuArquivo.add(btnNovoProcessoEmBranco);

        btnNovoProcessoCabecalhoModelo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        btnNovoProcessoCabecalhoModelo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/duplicar.png"))); // NOI18N
        btnNovoProcessoCabecalhoModelo.setText("Novo Processo Utilizando Cabeçalho Como Modelo");
        btnNovoProcessoCabecalhoModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoProcessoCabecalhoModeloActionPerformed(evt);
            }
        });
        menuArquivo.add(btnNovoProcessoCabecalhoModelo);

        btnSalvarPublicacao.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        btnSalvarPublicacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/save.png"))); // NOI18N
        btnSalvarPublicacao.setText("Salvar");
        btnSalvarPublicacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarPublicacaoActionPerformed(evt);
            }
        });
        menuArquivo.add(btnSalvarPublicacao);

        jMenuBar2.add(menuArquivo);

        menuFiltro.setText("Filtrar");
        menuFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFiltroActionPerformed(evt);
            }
        });

        btnFiltrarPorNumeroUnico.setText("Filtrar por número único");
        btnFiltrarPorNumeroUnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarPorNumeroUnicoActionPerformed(evt);
            }
        });
        menuFiltro.add(btnFiltrarPorNumeroUnico);

        btnFiltrarPorTrechoDaPublicacao.setText("Filtrar por trecho da publicação");
        btnFiltrarPorTrechoDaPublicacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarPorTrechoDaPublicacaoActionPerformed(evt);
            }
        });
        menuFiltro.add(btnFiltrarPorTrechoDaPublicacao);

        btnFiltrarPorCodigoEscritorio.setText("Filtrar por código do escritório");
        btnFiltrarPorCodigoEscritorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarPorCodigoEscritorioActionPerformed(evt);
            }
        });
        menuFiltro.add(btnFiltrarPorCodigoEscritorio);
        menuFiltro.add(separator);

        btnLimparFiltro.setText("Limpar filtro");
        btnLimparFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparFiltroActionPerformed(evt);
            }
        });
        menuFiltro.add(btnLimparFiltro);

        jMenuBar2.add(menuFiltro);

        menuMarcar.setText("Marcar");

        btnMarcarProcessosRevisado.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        btnMarcarProcessosRevisado.setText("Marcar processos listados como revisado");
        btnMarcarProcessosRevisado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarcarProcessosRevisadoActionPerformed(evt);
            }
        });
        menuMarcar.add(btnMarcarProcessosRevisado);

        btnDesmarcarProcessosRevisado.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        btnDesmarcarProcessosRevisado.setText("Desmarcar processos listados como revisado");
        btnDesmarcarProcessosRevisado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesmarcarProcessosRevisadoActionPerformed(evt);
            }
        });
        menuMarcar.add(btnDesmarcarProcessosRevisado);

        jMenuBar2.add(menuMarcar);

        menuAjuda.setText("Ajuda");

        menuSobre.setText("Sobre");
        menuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSobreActionPerformed(evt);
            }
        });
        menuAjuda.add(menuSobre);

        jMenuBar2.add(menuAjuda);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectRecorte, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectTribunal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar)))
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(dataBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(selectTribunal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar)
                    .addComponent(jLabel14)
                    .addComponent(selectRecorte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
	
    private void selectEstadoActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_selectEstadoActionPerformed
        carregarTribunais();
    }//GEN-LAST:event_selectEstadoActionPerformed

    /**
     * Função chamada ao clicar no botão buscar
     * @param evt 
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        carregarTabela();
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Função chamada ao clicar no botão anterior
     * @param evt 
     */
    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        scrollAnteriorTabela();
    }//GEN-LAST:event_btnAnteriorActionPerformed
    
    /**
     * Função chamada ao clicar no botão próximo
     * @param evt 
     */
    private void btnProximaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProximaActionPerformed
        scrollProximaTabela();
    }//GEN-LAST:event_btnProximaActionPerformed

    /**
     * Função chamada ao teclar na tabela de processos
     * @param evt 
     */
    private void tabelaProcessosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaProcessosKeyTyped
        carregarPublicacao();
    }//GEN-LAST:event_tabelaProcessosKeyTyped

    /**
     * Função chamada ao clicar na linha da tabela de processos
     * @param evt 
     */
    private void tabelaProcessosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProcessosMouseClicked
        carregarPublicacao();
    }//GEN-LAST:event_tabelaProcessosMouseClicked

    private void menuFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFiltroActionPerformed
    }//GEN-LAST:event_menuFiltroActionPerformed

    /**
     * Função chamada ao clicar no botão filtrar por trecho da publicação.
     * @param evt 
     */
    private void btnFiltrarPorTrechoDaPublicacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarPorTrechoDaPublicacaoActionPerformed
        new FiltroPublicacoesTrecho(this).setVisible(true);
    }//GEN-LAST:event_btnFiltrarPorTrechoDaPublicacaoActionPerformed

    /**
     * Função chamada ao clicar no botão filtrar por número da publicação
     * @param evt 
     */
    private void btnFiltrarPorNumeroUnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarPorNumeroUnicoActionPerformed
        new FiltroPublicacoesNumeroUnico(this).setVisible(true);
    }//GEN-LAST:event_btnFiltrarPorNumeroUnicoActionPerformed

    /**
     * Função chamada ao clicar no botão limpar filtro
     * @param evt 
     */
    private void btnLimparFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparFiltroActionPerformed
        carregarTabela();
    }//GEN-LAST:event_btnLimparFiltroActionPerformed

    /**
     * Função chamada ao apertar uma tecla do teclado na tabela
     * @param evt 
     */
    private void tabelaProcessosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaProcessosKeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_DOWN) || (evt.getKeyCode() == KeyEvent.VK_UP))
        {
            carregarPublicacao();
        }
        else if (evt.getKeyCode() == KeyEvent.VK_LEFT)
        {
            scrollAnteriorTabela();
        }
        else if (evt.getKeyCode() == KeyEvent.VK_RIGHT)
        {
            scrollProximaTabela();
        }
    }//GEN-LAST:event_tabelaProcessosKeyPressed

    /**
     * Função chamada ao clicar no botão salvar publicação
     * @param evt 
     */
    private void btnSalvarPublicacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarPublicacaoActionPerformed
        salvarPublicacao();
    }//GEN-LAST:event_btnSalvarPublicacaoActionPerformed
    
    /**
     * Função chamada ao digitar no campo vara
     * @param evt 
     */
    private void varaPublicacaoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_varaPublicacaoTxtKeyPressed
        
    }//GEN-LAST:event_varaPublicacaoTxtKeyPressed

    /**
     * Função chamada após a ação de digitar na vara
     * @param evt 
     */
    private void varaPublicacaoTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_varaPublicacaoTxtKeyReleased
        confereAlteracoes();
    }//GEN-LAST:event_varaPublicacaoTxtKeyReleased

    /**
     * Função chamada após a açao de digitar na vara
     * @param evt 
     */
    private void textoPublicacaoTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoPublicacaoTxtKeyReleased
        confereAlteracoes();
    }//GEN-LAST:event_textoPublicacaoTxtKeyReleased

    /**
     * Função chamada ao clicar no botão salvar
     * @param evt 
     */
    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        salvarPublicacao();
    }//GEN-LAST:event_btnSalvarActionPerformed

    /**
     * Função chamada ao clicar no botão novo processo em branco
     * @param evt 
     */
    private void btnNovoProcessoEmBrancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoProcessoEmBrancoActionPerformed
        new CadastroPublicacaoEmBranco().setVisible(true);
    }//GEN-LAST:event_btnNovoProcessoEmBrancoActionPerformed

    /**
     * Função chamada ao clicar no botão novo processo utilizando o cabeçalho como modelo
     * @param evt 
     */
    private void btnNovoProcessoCabecalhoModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoProcessoCabecalhoModeloActionPerformed
        abrirFormCadastroPublicacaoUtilizandoCabecalho();
    }//GEN-LAST:event_btnNovoProcessoCabecalhoModeloActionPerformed

    private void menuArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArquivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuArquivoActionPerformed

    /**
     * Função chamada ao clicar no botão sobre
     * @param evt 
     */
    private void menuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSobreActionPerformed
        new Sobre().setVisible(true);
    }//GEN-LAST:event_menuSobreActionPerformed

    /**
     * Função chamada ao clicar no botão nova publicação em branco
     * @param evt 
     */
    private void btnNovaPublicacaoEmBrancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaPublicacaoEmBrancoActionPerformed
        new CadastroPublicacaoEmBranco().setVisible(true);
    }//GEN-LAST:event_btnNovaPublicacaoEmBrancoActionPerformed

    /**
     * FUnção chamada ao clicar no botão duplicar publicação
     * @param evt 
     */
    private void btnDuplicarPublicacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDuplicarPublicacaoActionPerformed
        abrirFormCadastroPublicacaoUtilizandoCabecalho();
    }//GEN-LAST:event_btnDuplicarPublicacaoActionPerformed

    /**
     * Função chamada ao clicar no botão de filtrar por código do escritório.
     * @param evt 
     */
    private void btnFiltrarPorCodigoEscritorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarPorCodigoEscritorioActionPerformed
        new FiltroPublicacoesCodigoEscritorio(this).setVisible(true);
    }//GEN-LAST:event_btnFiltrarPorCodigoEscritorioActionPerformed

    private void arquivoPublicacaoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arquivoPublicacaoTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_arquivoPublicacaoTxtActionPerformed

    private void numeroProcessoPublicacaoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numeroProcessoPublicacaoTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numeroProcessoPublicacaoTxtActionPerformed

    /**
     * Função chamada ao clicar no botão de marcar todos os processos.
     * @param evt 
     */
    private void btnMarcarProcessosRevisadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarcarProcessosRevisadoActionPerformed
        marcarRevisaoProcessos(true);
    }//GEN-LAST:event_btnMarcarProcessosRevisadoActionPerformed

    /**
     * Função chamada ao clicar no botão de desmarcar todos os processos.
     * @param evt 
     */ 
    private void btnDesmarcarProcessosRevisadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesmarcarProcessosRevisadoActionPerformed
        marcarRevisaoProcessos(false);
    }//GEN-LAST:event_btnDesmarcarProcessosRevisadoActionPerformed

    private void selectEstadoItemStateChanged(java.awt.event.ItemEvent evt){}
    
    private void selectTribunalItemStateChanged(java.awt.event.ItemEvent evt){}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new TelaPrincipal().setVisible(true);
            }
        });
    }
    
    /**
     * Move o scroll para o valor anterior na tabela
     */
    private void scrollAnteriorTabela()
    {
        if (conteudoAlterado)
        {
            int resposta = JOptionPane.showConfirmDialog(null, "Existem alterações não salvas no processo. Deseja salvar?");
            if (resposta == 0)
            {
                salvarPublicacao();
            }
        }
        
        if (tabelaProcessos.getSelectedRow() == 0)
        {
            GuiUtils.selectAndScroll(tabelaProcessos, (tabelaProcessos.getRowCount() - 1));
        }
        else
        {
            GuiUtils.selectAndScroll(tabelaProcessos, (tabelaProcessos.getSelectedRow() - 1));
        }
        
        carregarPublicacao();
        confereAlteracoes();
    }
    
    /**
     * Move o scroll para o próximo valor na tabela
     */
    private void scrollProximaTabela()
    {
        if (conteudoAlterado)
        {
            int resposta = JOptionPane.showConfirmDialog(null, "Existem alterações não salvas no processo. Deseja salvar?");
            if (resposta == 0)
            {
                salvarPublicacao();
            }
        }
        
        if ((tabelaProcessos.getSelectedRow()) == (tabelaProcessos.getRowCount() - 1))
        {
            GuiUtils.selectAndScroll(tabelaProcessos, 0);
        }
        else
        {
            GuiUtils.selectAndScroll(tabelaProcessos, tabelaProcessos.getSelectedRow() + 1);
        }
        
        carregarPublicacao();
        confereAlteracoes();
    }
    
    /**
     * Função para buscar todos os recortes e coloca no select dos recortes da tela inicial
     */
    private void carregarRecortes()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            @SuppressWarnings("unchecked")
            public void run()
            {
                try
                {
                    // Busca os recortes
                    List<Recorte> ListaRecortes = cRecorteModel.buscar();

                    for (Recorte ListaRecorte : ListaRecortes)
                    {
                        String nomeRecorte = ListaRecorte.getNomeRecorte();                    
                        selectRecorte.addItem(nomeRecorte);
                    }

                    // Deixa selecionado o index 0
                    if (!ListaRecortes.isEmpty())
                    {
                        selectRecorte.setSelectedIndex(0);
                    }

                    // Carrega os estados
                    carregarEstados();
                }
                catch (SQLException ex)
                {
                    Excecao excecao = new Excecao("Erro de SQL", this.getClass().getName(), "Erro ao buscar os recortes. " + ex.toString());
                }
                catch (ClassNotFoundException ex)
                {
                    Excecao excecao = new Excecao("Classe não encontrada", this.getClass().getName(), "Erro ao iniciar a classe do JTDS. " + ex.toString());
                }
            }            
        }, "Thread para buscar os recortes.");
        
        thread.start();
    }
    
    /**
     * Função para buscar todos os estados e colocar no select dos estados da tela inicial.
     */
    private void carregarEstados()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            @SuppressWarnings("unchecked")
            public void run()
            {
                try
                {
                    // Busca os estados
                    List<Estado> ListaEstados = cEstadoModel.buscar();

                    for (Estado ListaEstado : ListaEstados)
                    {
                        String nomeEstado = ListaEstado.getNome();
                        selectEstado.addItem(nomeEstado);
                    }

                    // Deixa selecionado como padrão o index 0
                    if (!ListaEstados.isEmpty())
                    {
                        selectEstado.setSelectedIndex(0);
                    }

                    // Carrega os tribunais
                    carregarTribunais();
                }
                catch (SQLException ex)
                {
                    Excecao excecao = new Excecao("Erro de SQL", this.getClass().getName(), "Erro ao buscar os estados. " + ex.toString());
                }
                catch (ClassNotFoundException ex)
                {
                    Excecao excecao = new Excecao("Classe não encontrada", this.getClass().getName(), "Erro ao iniciar a classe do JTDS. " + ex.toString());
                }
            }
        }, "Thread para buscar os estados.");
        
        thread.start();
    }
    
    /**
     * Função para buscar todos os tribunais de acordo com o estado selecionado
     */
    private void carregarTribunais()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            @SuppressWarnings("unchecked")
            public void run()
            {
                try
                {
                    Recorte cRecorte = new Recorte();
                    cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                    Estado cEstado = new Estado();
                    cEstado.setNome(selectEstado.getSelectedItem().toString());

                    selectTribunal.removeAllItems();

                    // Busca os tribunais
                    List<Tribunal> ListaTribunais = cTribunalModel.buscarPorEstado(cRecorte, cEstado);

                    selectTribunal.addItem("Todos");

                    for (Tribunal ListaTribunal : ListaTribunais)
                    {
                        String siglaTribunal = ListaTribunal.getSigla();
                        String nomeTribunal  = ListaTribunal.getNomeTribunal();                    
                        selectTribunal.addItem(siglaTribunal + " - " + nomeTribunal);
                    }

                    // Deixa selecionado como padrão o index 0
                    if (!ListaTribunais.isEmpty())
                    {
                        selectTribunal.setSelectedIndex(0);
                    }
                }
                catch (SQLException ex)
                {
                    Excecao excecao = new Excecao("Erro de SQL", this.getClass().getName(), "Erro ao buscar os tribunais. " + ex.toString());
                }
                catch (ClassNotFoundException ex)
                {
                    Excecao excecao = new Excecao("Classe não encontrada", this.getClass().getName(), "Erro ao iniciar a classe do JTDS. " + ex.toString());
                }
            }
        }, "Thread para buscar os tribunais.");
        
        thread.start();
    }
    
    /**
     * Função para alimentar a tabela
     */
    private void carregarTabela()
    {
        Thread thread;
        thread = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    btnBuscar.setEnabled(false);
                    btnBuscar.setText("Buscando...");
                    jInternalFrameListaPublicacoes.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/loading.png")));

                    barraProgressoOperacaoDemorada.setString("Buscando processos...");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMinimum());
                    barraProgressoOperacaoDemorada.setVisible(true);
                
                    Recorte cRecorte = new Recorte();
                    cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                    Estado cEstado = new Estado();
                    cEstado.setNome(selectEstado.getSelectedItem().toString());

                    DateFormat df = DateFormat.getDateInstance();
                    Date data = df.parse(dataBusca.getText());

                    ProcessoModel cProcessoModel = new ProcessoModel(cRecorte, cEstado);
                    List<Processo> ListaProcessos = null;

                    if (selectTribunal.getSelectedItem().toString().equalsIgnoreCase("Todos"))
                    {
                        ListaProcessos = cProcessoModel.buscar(data);
                    }
                    else
                    {
                        Tribunal cTribunal = new Tribunal();
                        cTribunal.setNomeTribunal(selectTribunal.getSelectedItem().toString().split(" - ")[1]);

                        ListaProcessos = cProcessoModel.buscar(data, cTribunal);
                    }

                    DefaultTableModel model = (DefaultTableModel) tabelaProcessos.getModel();
                    model.setNumRows(0);

                    if (ListaProcessos.isEmpty())
                    {
                        JOptionPane.showMessageDialog(null, "Não existem publicações de acordo com a busca.");
                    }
                    else
                    {
                        for (Processo cProcesso : ListaProcessos)
                        {
                            Object[] linha =
                            {
                                cProcesso.getNumProcesso(),
                                cProcesso.getTribunal().getSigla(),
                                cProcesso.getEscritorio().getCodigo(),
                                cProcesso.getEscritorio().getCliente().getNome(),
                                cProcesso.isRevisado()
                            };

                            model.addRow(linha);
                        }
                    }

                    if (tabelaProcessos.getRowCount() > 0)
                    {
                        menuMarcar.setEnabled(true);
                    }

                    btnBuscar.setEnabled(true);
                    btnBuscar.setText("Buscar");
                    jInternalFrameListaPublicacoes.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/lista.png")));

                    atualizaLabelPaginacao(0);

                    barraProgressoOperacaoDemorada.setString("Finalizado");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMaximum());
                    barraProgressoOperacaoDemorada.setVisible(false);
                }
                catch (HeadlessException | ParseException ex)
                {
                    Excecao excecao = new Excecao("Erro ao buscar os processos", this.getClass().getName(), ex.toString());
                }
                catch (SQLException ex)
                {
                    Excecao excecao = new Excecao("Erro de SQL", this.getClass().getName(), "Erro ao buscar os recortes. " + ex.toString());
                }
                catch (ClassNotFoundException ex)
                {
                    Excecao excecao = new Excecao("Classe não encontrada", this.getClass().getName(), "Erro ao iniciar a classe do JTDS. " + ex.toString());
                }
            }
        }, "Thread para buscar os valores para a tabela");
        
        thread.start();
    }
     
    /**
     * Função para carregar a publicação
     */
    private void carregarPublicacao()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    jInternalFrameDetalhesProcesso.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/loading.png")));
                    btnNovoProcessoCabecalhoModelo.setEnabled(true);
                    btnDuplicarPublicacao.setEnabled(true);

                    barraProgressoOperacaoDemorada.setString("Carregando publicação...");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMinimum());
                    barraProgressoOperacaoDemorada.setVisible(true);
                
                    Recorte cRecorte = new Recorte();
                    cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                    Estado cEstado = new Estado();
                    cEstado.setNome(selectEstado.getSelectedItem().toString());

                    ProcessoModel cProcessoModel = new ProcessoModel(cRecorte, cEstado);
                    cProcessoModel.marcarRevisao((int) tabelaProcessos.getValueAt(tabelaProcessos.getSelectedRow(), 0), true);
                    tabelaProcessos.setValueAt(true, tabelaProcessos.getSelectedRow(), 4);
                    Processo cProcesso = cProcessoModel.buscar((int) tabelaProcessos.getValueAt(tabelaProcessos.getSelectedRow(), 0));
                    
                    numeroProcessoPublicacaoTxt.setText(cProcesso.getNumeroProcesso());
                    arquivoPublicacaoTxt.setText(cProcesso.getArquivo());
                    ordemPublicacaoTxt.setText(cProcesso.getOrdem() + "");
                    dataPublicacaoTxt.setText(new SimpleDateFormat("dd/MM/yyyy").format(cProcesso.getDataPublicacao()));
                    dataDisponibilizacaoTxt.setText(new SimpleDateFormat("dd/MM/yyyy").format(cProcesso.getDataDisponibilizacao()));
                    codEscritorioTxt.setText(cProcesso.getEscritorio().getCodigo() + "");
                    escritorioPublicacaoTxt.setText(cProcesso.getEscritorio().getNome());
                    nomeBuscadotxt.setText(cProcesso.getEscritorio().getCliente().getNome());
                    tribunalPublicacaoTxt.setText(cProcesso.getTribunal().getNomeTribunal());
                    varaPublicacaoTxt.setText(cProcesso.getVara());
                    
                    // Preenche o corpo da publicação:                    
                    String nomeBuscado        = cProcesso.getEscritorio().getCliente().getNome();
                    String nomeBuscadoMarcado = "<font bgcolor='black' color='white'>" + nomeBuscado + "</font>";
                    
                    String textoPublicacao    = cProcesso.getCorpoPublicacao();
                    textoPublicacao = cProcesso.getCorpoPublicacao().replaceAll("(?i)" + nomeBuscado, nomeBuscadoMarcado);
                    
                    textoPublicacaoTxt.setText(textoPublicacao);
                    
                    varaPublicacao  = cProcesso.getVara();
                    corpoPublicacao = textoPublicacaoTxt.getText();
                    
                    dataVistaProcesso = cProcesso.getDataVista();
                    
                    atualizaLabelPaginacao(tabelaProcessos.getSelectedRow());
                
                    barraProgressoOperacaoDemorada.setString("Finalizado");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMaximum());
                    barraProgressoOperacaoDemorada.setVisible(false);

                    jInternalFrameDetalhesProcesso.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/publicacao.png")));
                }
                catch (HeadlessException ex)
                {
                    Excecao excecao = new Excecao("Erro ao buscar os processos", this.getClass().getName(), ex.toString());
                }
                catch (SQLException ex)
                {
                    Excecao excecao = new Excecao("Erro de SQL", this.getClass().getName(), "Erro ao buscar a publicação. " + ex.toString());
                }
                catch (ClassNotFoundException ex)
                {
                    Excecao excecao = new Excecao("Classe não encontrada", this.getClass().getName(), "Erro ao iniciar a classe do JTDS. " + ex.toString());
                }
            }
        });
        
        thread.start();
    }
    
    /**
     * Função para filtrar a tabela
     * @param trechoBusca
     */
    public void filtrarTabelaPorTrecho(final String trechoBusca)
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {                    
                    barraProgressoOperacaoDemorada.setString("Filtrando publicações por trecho...");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMinimum());
                    barraProgressoOperacaoDemorada.setVisible(true);

                    menuFiltro.setText("Buscando...");
                    jInternalFrameListaPublicacoes.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/loading.png")));
                
                    Recorte cRecorte = new Recorte();
                    cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                    Estado cEstado = new Estado();
                    cEstado.setNome(selectEstado.getSelectedItem().toString());

                    DateFormat df = DateFormat.getDateInstance();
                    Date data = df.parse(dataBusca.getText());

                    ProcessoModel cProcessoModel = new ProcessoModel(cRecorte, cEstado);
                    List<Processo> ListaProcessos = null;

                    if (selectTribunal.getSelectedItem().toString().equalsIgnoreCase("Todos"))
                    {
                        ListaProcessos = cProcessoModel.buscar(data, trechoBusca);
                    }
                    else
                    {
                        Tribunal cTribunal = new Tribunal();
                        cTribunal.setNomeTribunal(selectTribunal.getSelectedItem().toString().split(" - ")[1]);

                        ListaProcessos = cProcessoModel.buscar(data, cTribunal, trechoBusca);
                    }

                    DefaultTableModel model = (DefaultTableModel) tabelaProcessos.getModel();
                    model.setNumRows(0);

                    if (ListaProcessos.isEmpty())
                    {
                        JOptionPane.showMessageDialog(null, "Não existem publicações de acordo com a busca.");
                    }
                    else
                    {
                        for (Processo cProcesso : ListaProcessos)
                        {
                            Object[] linha =
                            {
                                cProcesso.getNumProcesso(),
                                cProcesso.getTribunal().getSigla(),
                                cProcesso.getEscritorio().getCodigo(),
                                cProcesso.getEscritorio().getCliente().getNome(),
                                ""
                            };

                            model.addRow(linha);
                        }
                    }
                
                    atualizaLabelPaginacao(0);

                    menuFiltro.setText("Filtrar");
                    jInternalFrameListaPublicacoes.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/lista.png")));

                    barraProgressoOperacaoDemorada.setString("Finalizado");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMaximum());
                    barraProgressoOperacaoDemorada.setVisible(false);
                }
                catch (HeadlessException | ParseException ex)
                {
                    Excecao excecao = new Excecao("Erro ao buscar os processos", this.getClass().getName(), ex.toString());
                }
                catch (SQLException ex)
                {
                    Excecao excecao = new Excecao("Erro de SQL", this.getClass().getName(), "Erro ao buscar ao filtrar a tabela. " + ex.toString());
                }
                catch (ClassNotFoundException ex)
                {
                    Excecao excecao = new Excecao("Classe não encontrada", this.getClass().getName(), "Erro ao iniciar a classe do JTDS. " + ex.toString());
                }
            }
        });
        thread.start();
    }
    
    /**
     * Função para filtrar a tabela
     * @param numeroBusca
     */
    public void filtrarTabelaPorNumero(final int numeroBusca)
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {                    
                    barraProgressoOperacaoDemorada.setString("Filtrando publicações por número de cadastro...");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMinimum());
                    barraProgressoOperacaoDemorada.setVisible(true);

                    menuFiltro.setText("Buscando...");
                    jInternalFrameListaPublicacoes.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/loading.png")));
                
                    Recorte cRecorte = new Recorte();
                    cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                    Estado cEstado = new Estado();
                    cEstado.setNome(selectEstado.getSelectedItem().toString());

                    ProcessoModel cProcessoModel = new ProcessoModel(cRecorte, cEstado);
                    Processo cProcesso = cProcessoModel.buscar(numeroBusca);

                    DefaultTableModel model = (DefaultTableModel) tabelaProcessos.getModel();
                    model.setNumRows(0);

                    if (cProcesso == null)
                    {
                        JOptionPane.showMessageDialog(null, "Não existem publicações de acordo com a busca.");
                    }
                    else
                    {
                        Object[] linha =
                        {
                            cProcesso.getNumProcesso(),
                            cProcesso.getTribunal().getSigla(),
                            cProcesso.getEscritorio().getCodigo(),
                            cProcesso.getEscritorio().getCliente().getNome(),
                            ""
                        };

                        model.addRow(linha);
                    }
                
                    atualizaLabelPaginacao(0);

                    menuFiltro.setText("Filtrar");
                    jInternalFrameListaPublicacoes.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/lista.png")));

                    barraProgressoOperacaoDemorada.setString("Finalizado");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMaximum());
                    barraProgressoOperacaoDemorada.setVisible(false);
                }
                catch (HeadlessException ex)
                {
                    new Excecao("Erro ao buscar os processos", this.getClass().getName(), ex.toString());
                }
                catch (SQLException ex)
                {
                    Excecao excecao = new Excecao("Erro de SQL", this.getClass().getName(), "Erro ao buscar ao filtrar a tabela. " + ex.toString());
                }
                catch (ClassNotFoundException ex)
                {
                    Excecao excecao = new Excecao("Classe não encontrada", this.getClass().getName(), "Erro ao iniciar a classe do JTDS. " + ex.toString());
                }
            }
        });
        thread.start();
    }    
    
    /**
     * Funçao para filtrar por código do escritório
     * @param codigoEscritorio 
     */
    public void filtrarPorCodigoEscritorio(final int codigoEscritorio)
    {
        Thread thread = new Thread(new Runnable() 
        {
            @Override
            public void run()
            {
                barraProgressoOperacaoDemorada.setString("Filtrando publicações por código do escritório...");
                barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMinimum());
                barraProgressoOperacaoDemorada.setVisible(true);
                
                menuFiltro.setText("Buscando...");
                jInternalFrameListaPublicacoes.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/loading.png")));
                
                DefaultTableModel model = (DefaultTableModel) tabelaProcessos.getModel();
                
                List<Object> linhas = new ArrayList<>();
                
                for (int i = 0; i < tabelaProcessos.getRowCount(); i++)
                {
                    if (Integer.parseInt(model.getValueAt(i, 2).toString()) == codigoEscritorio)
                    {
                        Object[] linha =
                        {
                            Integer.parseInt(model.getValueAt(i, 0).toString()),
                            model.getValueAt(i, 1).toString(),
                            Integer.parseInt(model.getValueAt(i, 2).toString()),
                            model.getValueAt(i, 3).toString(),
                            model.getValueAt(i, 4).toString()
                        };
                        
                        linhas.add(linha);
                    }
                }
                
                model.setNumRows(0);
                
                for (Object linha : linhas)
                {
                    model.addRow((Object[]) linha);
                }
                
                atualizaLabelPaginacao(0);
                
                menuFiltro.setText("Filtrar");
                jInternalFrameListaPublicacoes.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/view/resources/lista.png")));
                
                barraProgressoOperacaoDemorada.setString("Finalizado");
                barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMaximum());
                barraProgressoOperacaoDemorada.setVisible(false);
            }
        });
        
        thread.start();
    }
    
    /**
     * Função para atualizar a Label de paginação
     * @param indexAtual Índice atual da paginação.
     */
    private void atualizaLabelPaginacao(int indexAtual)
    {
        labelPaginacao.setText((indexAtual + 1) + " / " + tabelaProcessos.getModel().getRowCount());
    }
    
    /**
     * Função para salvar uma publicação no banco de dados.
     */
    private void salvarPublicacao()
    {
        Thread thread = new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    barraProgressoOperacaoDemorada.setString("Salvando publicação...");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMinimum());
                    barraProgressoOperacaoDemorada.setVisible(true);

                    Recorte cRecorte = new Recorte();
                    cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                    Estado cEstado = new Estado();
                    cEstado.setNome(selectEstado.getSelectedItem().toString());

                    Processo cProcesso = new Processo();
                    cProcesso.setVara(varaPublicacaoTxt.getText());
                    cProcesso.setCorpoPublicacao(Jsoup.parse(textoPublicacaoTxt.getText()).text());

                    ProcessoModel cProcessoModel = new ProcessoModel(cRecorte, cEstado);
                    cProcessoModel.atualizar(cProcesso);
                    JOptionPane.showMessageDialog(null, "Publicação atualizada com sucesso.");

                    jInternalFrameDetalhesProcesso.setTitle(jInternalFrameDetalhesProcesso.getTitle().replace(" (Alterado) ", ""));
                    conteudoAlterado = false;
                    varaPublicacao  = varaPublicacaoTxt.getText();
                    corpoPublicacao = textoPublicacaoTxt.getText();

                    barraProgressoOperacaoDemorada.setString("Finalizado");
                    barraProgressoOperacaoDemorada.setValue(barraProgressoOperacaoDemorada.getMaximum());
                    barraProgressoOperacaoDemorada.setVisible(false);   
                }
                catch (SQLException ex)
                {
                    Excecao excecao = new Excecao("Erro de SQL", this.getClass().getName(), "Erro ao buscar ao salvar a publicação. " + ex.toString());
                }
                catch (ClassNotFoundException ex)
                {
                    Excecao excecao = new Excecao("Classe não encontrada", this.getClass().getName(), "Erro ao iniciar a classe do JTDS. " + ex.toString());
                }
            }
        });
        thread.start();
    }
    
    /**
     * Função para conferir as alterações na publicação atual
     */
    private void confereAlteracoes()
    {
        conteudoAlterado = !varaPublicacaoTxt.getText().equals(varaPublicacao) || !textoPublicacaoTxt.getText().equals(corpoPublicacao);
        
        if (conteudoAlterado)
        {
            if (!jInternalFrameDetalhesProcesso.getTitle().contains(" (Alterado) "))
            {
                // Muda para alterado
                jInternalFrameDetalhesProcesso.setTitle(jInternalFrameDetalhesProcesso.getTitle() + " (Alterado) ");
            }
        }
        else
        {
            // Muda para não alterado
            jInternalFrameDetalhesProcesso.setTitle(jInternalFrameDetalhesProcesso.getTitle().replace(" (Alterado) ", ""));
        }
        
        btnSalvar.setEnabled(conteudoAlterado);
    }
    
    /**
     * Função para abrir o formulário de cadastro de publicação utilizando o cabeçalho da publicação atual
     */
    private void abrirFormCadastroPublicacaoUtilizandoCabecalho()
    {
        Recorte cRecorte = new Recorte();
        cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

        Estado cEstado = new Estado();
        cEstado.setNome(selectEstado.getSelectedItem().toString());

        DateFormat df = DateFormat.getDateInstance();

        Processo cProcesso = new Processo();
        cProcesso.setArquivo(arquivoPublicacaoTxt.getText());
        cProcesso.setOrdem(Integer.parseInt(ordemPublicacaoTxt.getText()));
        cProcesso.setDataVista(dataVistaProcesso);
        cProcesso.setVara(varaPublicacaoTxt.getText());
        cProcesso.setNumeroProcesso(numeroProcessoPublicacaoTxt.getText());

        if (textoPublicacaoTxt.getSelectedText() != null)
        {
            cProcesso.setCorpoPublicacao(Jsoup.parse(textoPublicacaoTxt.getSelectedText()).text());
        }
        else
        {
            cProcesso.setCorpoPublicacao("");
        }

        Escritorio cEscritorio = new Escritorio();
        cEscritorio.setCodigo(Integer.parseInt(codEscritorioTxt.getText()));
        cEscritorio.setNome(escritorioPublicacaoTxt.getText());
        Cliente cCliente = new Cliente();
        cCliente.setNome(nomeBuscadotxt.getText());
        cEscritorio.setCliente(cCliente);
        cProcesso.setEscritorio(cEscritorio);

        Tribunal cTribunal = new Tribunal();
        cTribunal.setNomeTribunal(tribunalPublicacaoTxt.getText());
        cProcesso.setTribunal(cTribunal);

        new CadastroPublicacaoPorModelo(cRecorte, cEstado, cProcesso).setVisible(true);
    }
    
    /**
     * Função para marcar como revisado ou não os processos listados na tabela de processos.
     */
    private void marcarRevisaoProcessos(final boolean status)
    {
        final TelaPrincipal cTelaPrincipal = this;
        
        Thread thread = new Thread(
            new Runnable()
            {
                @Override
                public void run()
                {
                    try
                    {
                        Integer[] numProcessos = new Integer[tabelaProcessos.getRowCount()];

                        for (int i = 0; i < tabelaProcessos.getRowCount(); i++)
                        {
                            numProcessos[i] = Integer.parseInt(tabelaProcessos.getValueAt(i, 0).toString());
                        }

                        Recorte cRecorte = new Recorte();
                        cRecorte.setNomeRecorte(selectRecorte.getSelectedItem().toString());

                        Estado cEstado = new Estado();
                        cEstado.setNome(selectEstado.getSelectedItem().toString());

                        ProcessoModel cProcessoModel = new ProcessoModel(cRecorte, cEstado);
                        cProcessoModel.setTelaPrincipal(cTelaPrincipal);
                        cProcessoModel.marcarRevisao(numProcessos, status);

                        for (int i = 0; i < tabelaProcessos.getRowCount(); i++)
                        {
                            tabelaProcessos.setValueAt(status, i, 4);
                        }
                    }
                    catch (SQLException ex)
                    {
                        Excecao excecao = new Excecao("Erro de SQL", this.getClass().getName(), "Erro ao buscar ao marcar como revisado. " + ex.toString());
                    }
                    catch (ClassNotFoundException ex)
                    {
                        Excecao excecao = new Excecao("Classe não encontrada", this.getClass().getName(), "Erro ao iniciar a classe do JTDS. " + ex.toString());
                    }
                }
            }
        );
        
        thread.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField arquivoPublicacaoTxt;
    public javax.swing.JProgressBar barraProgressoOperacaoDemorada;
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JMenuItem btnDesmarcarProcessosRevisado;
    private javax.swing.JButton btnDuplicarPublicacao;
    private javax.swing.JMenuItem btnFiltrarPorCodigoEscritorio;
    private javax.swing.JMenuItem btnFiltrarPorNumeroUnico;
    private javax.swing.JMenuItem btnFiltrarPorTrechoDaPublicacao;
    private javax.swing.JMenuItem btnLimparFiltro;
    private javax.swing.JMenuItem btnMarcarProcessosRevisado;
    private javax.swing.JButton btnNovaPublicacaoEmBranco;
    private javax.swing.JMenuItem btnNovoProcessoCabecalhoModelo;
    private javax.swing.JMenuItem btnNovoProcessoEmBranco;
    private javax.swing.JButton btnProxima;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JMenuItem btnSalvarPublicacao;
    private javax.swing.JTextField codEscritorioTxt;
    private javax.swing.JTextField comarcaPublicacaoTxt;
    private javax.swing.JFormattedTextField dataBusca;
    private javax.swing.JFormattedTextField dataDisponibilizacaoTxt;
    private javax.swing.JFormattedTextField dataPublicacaoTxt;
    private javax.swing.JTextField escritorioPublicacaoTxt;
    private javax.swing.JInternalFrame jInternalFrameDetalhesProcesso;
    private javax.swing.JInternalFrame jInternalFrameListaPublicacoes;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanelCabecalho;
    private javax.swing.JPanel jPanelDetalhesPublicacao;
    private javax.swing.JPanel jPanelTabela;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneTabela;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel labelPaginacao;
    private javax.swing.JMenu menuAjuda;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenu menuFiltro;
    private javax.swing.JMenu menuMarcar;
    private javax.swing.JMenuItem menuSobre;
    private javax.swing.JTextField nomeBuscadotxt;
    private javax.swing.JTextField numeroProcessoPublicacaoTxt;
    private javax.swing.JTextField ordemPublicacaoTxt;
    private javax.swing.JComboBox selectEstado;
    private javax.swing.JComboBox selectRecorte;
    private javax.swing.JComboBox selectTribunal;
    private javax.swing.JPopupMenu.Separator separator;
    private javax.swing.JTable tabelaProcessos;
    private javax.swing.JEditorPane textoPublicacaoTxt;
    private javax.swing.JTextField tribunalPublicacaoTxt;
    private javax.swing.JTextField varaPublicacaoTxt;
    // End of variables declaration//GEN-END:variables
}
